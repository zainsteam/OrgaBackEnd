<?php

defined('BASEPATH') OR exit('No direct script access allowed');

//include Rest Controller library
require (APPPATH.'/libraries/REST_Controller.php');
use Restserver\Libraries\REST_Controller;

class User extends REST_Controller{

	function __construct($config = 'rest'){
            header('Access-Control-Allow-Origin: *');
            header("Access-Control-Allow-Headers: Origin, X-Requested-With,Content-Type, Accept, Access-Control-Request-Method");
            header('Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE');
            $method = $_SERVER['REQUEST_METHOD'];
            if($method == "OPTIONS") {
            die();
            }
            parent::__construct();
            $this->load->model('User_register_model');

      }

	public function register_post(){
		$postuserdata = json_decode(file_get_contents("php://input"));
		// print_r($postuserdata);
		// exit;
		$name = $postuserdata->name;
		$email = $postuserdata->email;
		$country = $postuserdata->country;
		$dob = $postuserdata->dob;
		$password = $postuserdata->password;
		$ecn_pass = md5($password);
		
		$userdata = array(
			'name' => $name,
			'email' => $email,
			'country' => $country,
			'dob' => $dob,
			'password' => $ecn_pass
		);

		$check_mail_exists = $this->User_register_model->check_mail_exists($email);

		if($check_mail_exists){

			$response = json_encode("Email already exist..!");
		}
		else{
			$register_user = $this->User_register_model->register_user($userdata);
			if($register_user){
				$response = json_encode("Registerd successfully..!");
			}
		}

		print_r($response);
		
		//$userdata=json_decode(file_get_contents("php://input"));
		//echo $userdata;
	}

	public function login_post(){
		// $postlogindata = json_decode(file_get_contents("php://input"));
		// print_r($postlogindata);
		// exit;
		$userData = array();

		$email = $this->post('email');
		$password =md5($this->post('password'));

		$authUser = $this->User_register_model->auth_user($email, $password);

		if($authUser == TRUE){
			$userData['status'] = 'success';
			$userData['message'] = 'You are successfully logged in..!';
			$userData['userdetails'] = $authUser[0];
			$response = json_encode($userData);
		}else{
			$userData['status'] = 'failed';
			$userData['message'] = 'Invalid email or password..!';
			$response = json_encode($userData);
		}
		print_r($response);
	}

	//add notes
	public function stickynotes_post(){
		$postnotedata = json_decode(file_get_contents("php://input"));
		$user_id = $postnotedata->user_id;
		$notes = $postnotedata->note;
		$note_data = array('user_id' => $user_id, 'notes'=> $notes);
		$save_notes = $this->User_register_model->add_notes($note_data);

		if($save_notes == TRUE){
			$userData['status'] = 'success';
			$userData['message'] = 'Your note added successfully..!';
			$response = json_encode($userData);
		}else{
			$userData['status'] = 'failed';
			$userData['message'] = 'Unable to add the note..!';
			$response = json_encode($userData);
		}
		print_r($response);
	}

	// get sticky notes
	public function getnotes_post(){
		$userData = array();
		$user_id = $this->post('user_id');
		$all_notes = $this->User_register_model->get_all_notes($user_id);
		if($all_notes == TRUE){
			$userData['status'] = 'success';
			$userData['message'] = 'Lis of all Quick notes are below.';
			$userData['all_notes'] = $all_notes;
			$response = json_encode($userData);
		}else{
			$userData['status'] = 'failed';
			$userData['message'] = 'Unable to fetch Quick notes...!';
			$response = json_encode($userData);
		}
		print_r($response);
	}

	//Add category by users
	public function add_category_post(){
		$categoryData = array();
		$user_id = $this->post('user_id');
		$category_name = $this->post('category_name');

		$category_data = array('user_id' => $user_id, 'category_name'=> $category_name);
		$add_category = $this->User_register_model->add_category($category_data);

		if($add_category == TRUE){
			$categoryData['status'] = 'success';
			$categoryData['message'] = 'Your category added successfully..!';
			$response = json_encode($categoryData);
		}else{
			$categoryData['status'] = 'failed';
			$categoryData['message'] = 'Unable to add the category..!';
			$response = json_encode($categoryData);
		}
		print_r($response);
	}

	//Get category by user's id
	public function user_category_post(){
		$user_category = [];
		$user_id = $this->post('user_id');
		$get_category = $this->User_register_model->get_user_category($user_id);
		if($get_category == TRUE){
			$user_category['status'] = 'success';
			$user_category['message'] = 'Lis of all categories are below.';
			$user_category['all_category'] = $get_category;
			$response = json_encode($user_category);
		}else{
			$user_category['status'] = 'failed';
			$user_category['message'] = 'Unable to fetch categories...!';
			$response = json_encode($user_category);
		}
		print_r($response);
	}

	// add user task
	public function create_task_post(){
		
    	$user_tasks = [];
		$user_id = $this->post('user_id');
		$task_name = $this->post('task_name');
		$task_duration = $this->post('duration');
		$bring_with_you = $this->post('bring_with_you');
		$frequency = $this->post('frequency');
		$if_not_completed = $this->post('if_not_completed');
		$priority = $this->post('priority');
		$category = $this->post('category');
		$color = $this->post('color');
		$due_date = $this->post('due_date');
		$sub_tasks = json_encode($this->post('sub_tasks'));

		if($sub_tasks == null){
				$task_data = array(
				'name' => $task_name,
				'user_id' => $user_id,
				'duration' => $task_duration,
				'bring_with_you' => $bring_with_you,
				'frequency' => $frequency,
				'if_not_completed' => $if_not_completed,
				'priority' => $priority,
				'category' => $category,
				'color' => $color,
				'due_date' => $due_date,
			);
		}else{
		$task_data = array(
				'name' => $task_name,
				'user_id' => $user_id,
				'duration' => $task_duration,
				'bring_with_you' => $bring_with_you,
				'frequency' => $frequency,
				'if_not_completed' => $if_not_completed,
				'priority' => $priority,
				'category' => $category,
				'color' => $color,
				'due_date' => $due_date,
				'sub_tasks' => $sub_tasks
			);
		}
		$add_task = $this->User_register_model->add_user_task($task_data);

		if($add_task == TRUE){
			$user_tasks['status'] = 'success';
			$user_tasks['message'] = 'Your task has been added successfully!';
			$response = json_encode($user_tasks);
		}else{
			$user_tasks['status'] = 'failed';
			$user_tasks['message'] = 'Unable to add task...!';
			$response = json_encode($user_tasks);
		}
		print_r($response);
	}

	//get user tasks
	public function get_user_task_post(){
		$user_tasks = [];

		$this->form_validation->set_rules('user_id', 'User Id', 'required|numeric|strip_tags');
		if($this->form_validation->run() == FALSE){
            $user_tasks['status'] = 'failed';
			$user_tasks['message'] = validation_errors();
			$response = json_encode($user_tasks);
        }else{
        	 $user_id = $this->post('user_id');
        	 $get_user_tasks = $this->User_register_model->get_user_tasks($user_id);
        	 if($get_user_tasks == TRUE){
				$user_task['status'] = 'success';
				$user_task['message'] = 'Lis of all tasks are below.';
				$user_task['all_tasks'] = $get_user_tasks;
				$response = json_encode($user_task);
			}else{
				$user_task['status'] = 'failed';
				$user_task['message'] = 'Unable to fetch tasks...!';
				$response = json_encode($user_task);
			}
        }
        print_r($response);
	}

	//add user's events
	public function add_event_post(){
		$user_events = [];
		$user_id = $this->post('user_id');
		$event_name = $this->post('event_name');
		$start_date = $this->post('start_date');
		$duration = $this->post('duration');
		$bring_with_you = $this->post('bring_with_you');
		$reminders = $this->post('reminders');
		$minutes_before = $this->post('minutes_before');
		$repetition = $this->post('repetition');

		$event_data = array(
			'user_id' => $user_id,
			'event_name' => $event_name,
			'start_date' => $start_date,
			'duration' => $duration,
			'bring_with_you' => $bring_with_you,
			'reminders' => $reminders,
			'minutes_before' => $minutes_before,
			'repetition' => $repetition,
		);

		$add_event = $this->User_register_model->add_user_event($event_data);

		if($add_event == TRUE){
			$user_events['status'] = 'success';
			$user_events['message'] = 'Your event has been added successfully!';
			$response = json_encode($user_events);
		}else{
			$user_events['status'] = 'failed';
			$user_events['message'] = 'Unable to add event...!';
			$response = json_encode($user_events);
		}
		print_r($response);
	}

	//get user's event
	public function get_user_event_post(){
		$user_events = [];
		$user_id = $this->post('user_id');
		$get_user_events = $this->User_register_model->get_user_events($user_id);
    	 if($get_user_events == TRUE){
			$user_events['status'] = 'success';
			$user_events['message'] = 'Lis of all events are below.';
			$user_events['all_tasks'] = $get_user_events;
			$response = json_encode($user_events);
		}else{
			$user_events['status'] = 'failed';
			$user_events['message'] = 'Unable to fetch events...!';
			$response = json_encode($user_events);
		}
		print_r($response);
	}

	//App settings
	public function app_settings_post(){
		$app_settings = [];
		$user_id = $this->post('user_id');
		$color = $this->post('color');
		$priority = $this->post('priority');
		$sound_for_reminder = $this->post('sound_for_reminder');
		$due_date = $this->post('due_date');

		$app_setting_data = array(
			'user_id' => $user_id,
			'color' => $color,
			'priority' => $priority,
			'sound_for_reminder' => $sound_for_reminder,
			'due_date' => $due_date,
		);

		$app_setting_update = $this->User_register_model->app_setting_update($user_id, $app_setting_data);

		if($app_setting_update == TRUE){
			$app_settings['status'] = 'success';
			$app_settings['message'] = 'Your app settings has been updated successfully!';
			$response = json_encode($app_settings);
		}else{
			$app_settings['status'] = 'failed';
			$app_settings['message'] = 'Unable to update event settings...!';
			$response = json_encode($app_settings);
		}
		print_r($response);
	}

	// get today's to-dos

	public function get_more_todos_post(){
		$todays_todos = [];
		$today_date = date('Y-m-d');
		$user_id = $this->post('user_id');
		$today_todos = $this->User_register_model->today_todos($today_date, $user_id);
		if($today_todos == TRUE){
			$todays_todos['status'] = 'success';
			$todays_todos['message'] = 'Lis of all tasks for today are.';
			$todays_todos['all_tasks'] = $today_todos;
			$response = json_encode($todays_todos);
		}else{
			$todays_todos['status'] = 'failed';
			$todays_todos['message'] = 'You have no tasks for today..!!';
			$response = json_encode($todays_todos);
		}
		print_r($response);
	}

	//delete notes

	public function delete_note_post(){
		$delete_note = [];
		$note_id = $this->post('id');

		$delete = $this->User_register_model->delete_note($note_id);
		if($delete == TRUE){
			$delete_note['status'] = 'success';
			$delete_note['message'] = 'Your notes has been deleted successfully.';
			$response = json_encode($delete_note);
		}else{
			$delete_note['status'] = 'failed';
			$delete_note['message'] = 'Unable to delete notes..!!';
			$response = json_encode($delete_note);
		}
		print_r($response);
	}

	//Change password

	public function change_password_post(){
		$password_change = [];
		$user_id = $this->post('user_id');
		$encrypt_old_password = $this->post('encrypt_old_password');
		$entered_old_password = md5($this->post('entered_old_password'));
		$new_password = md5($this->post('new_password'));

		if($encrypt_old_password == $entered_old_password){
			$change_pass = $this->User_register_model->change_password($user_id, $new_password);
			if($change_pass == TRUE){
				$password_change['status'] = 'success';
				$password_change['message'] = 'Your password has been change successfully.';
				$response = json_encode($password_change);
			}else{
				$password_change['status'] = 'failed';
				$password_change['message'] = 'Unable to change password..!!';
				$response = json_encode($password_change);
			}
		}else{
			$password_change['status'] = 'failed';
			$password_change['message'] = 'Your current password is wrong..!!';
			$response = json_encode($password_change);
		}
		print_r($response);
	}

	//delete user category
	public function delete_category_post(){
		$delete_cat = [];
		$cat_id = $this->post('cat_id');
		$delete = $this->User_register_model->delete_category($cat_id);
		if($delete == TRUE){
			$delete_cat['status'] = 'success';
			$delete_cat['message'] = 'Your category has been deleted successfully.';
			$response = json_encode($delete_cat);
		}else{
			$delete_cat['status'] = 'failed';
			$delete_cat['message'] = 'Unable to delete category..!!';
			$response = json_encode($delete_cat);
		}
		print_r($response);
	}
}
